######################
# Gary Feng, Jan 2020 for Cmind 
######################
# env file setting parameters for the production environment, using the same docker image. 
# this .env-prod file will be read by "docker run --env-file .env-prod ...."

# === local-testing only ===
# starting mongoDB server locally
# "docker run -d -p 27017:27017  --env-file .env-prod mongo"
# this runs on my PC at 192.168.56.1. I got it by running "ipconfig" and look for VirtualBox Host-Only Nextwork

# Production: change the IP address, port, and user in the production env.
MONGO_IP=192.168.56.1
MONGO_PORT=27017
MONGO_INITDB_ROOT_USERNAME=root
MONGO_INITDB_ROOT_PASSWORD=example
MONGO_DB_NAME=cmind
MONGO_FEATURE_COLLECTION_NAME=featuresummary

# generally no need to change the logger user name or password
MONGO_LOGGING_USERNAME=logger
MONGO_LOGGING_PASSWORD=logging
MONGO_LOGGING_COLLECTION_NAME=log

# === local testing only ===
# setting up MongoExpress 
# with the following env vars, you can start the mongo-express docker using the following:
# "docker run -it -p 8081:8081 --env-file .env-prod mongo-express"
# this will connect as admin and prints some warning messages. 
# you can open http://localhost:8081/ to check

# Production: change the IP address, port, and user in the production env.
ME_CONFIG_MONGODB_SERVER=192.168.56.1
ME_CONFIG_MONGODB_PORT=27017
ME_CONFIG_MONGODB_ADMINUSERNAME=root
ME_CONFIG_MONGODB_ADMINPASSWORD=example

####################
# Running cmind predict, after setting up 
####################
# Openface
# "docker run -i -t --env-file .env-prod -v %cd%:/video of_pandas python /openface.py 1_2_3_4.mp4"

# Pyaa
# "docker run -i -t --env-file .env-prod -v %cd%:/audio docker-pyaa python /pyaa.py 1_2_3_4.mp4"

# Predict
# "docker run -i -t --env-file .env-prod cmind-predict python /predict.py 1_2_3_4"



